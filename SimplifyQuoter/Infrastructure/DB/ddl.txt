-- ===============================================
-- 1) IMPORT-TXT FLOW
-- ===============================================

CREATE TABLE import_file (
  id          UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  filename    TEXT        NOT NULL,
  file_type   TEXT        NOT NULL  -- 'INFO_EXCEL' or 'INSIDE_EXCEL'
               CHECK (file_type IN ('INFO_EXCEL','INSIDE_EXCEL')),
  uploaded_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  run_count   INT         NOT NULL DEFAULT 0   -- how many times "Process" clicked
);

CREATE TABLE import_row (
  id        UUID    PRIMARY KEY DEFAULT gen_random_uuid(),
  file_id   UUID    NOT NULL REFERENCES import_file(id) ON DELETE CASCADE,
  row_index INT     NOT NULL,                    -- Excel row number
  cells     JSONB   NOT NULL,                    -- raw row values
  is_ready  BOOLEAN NOT NULL,                    -- cells[14]=='READY'
  processed BOOLEAN NOT NULL DEFAULT FALSE,      -- after .txt export
  exec_count INT   NOT NULL DEFAULT 0            -- how many times exported
);


-- ===============================================
-- 2) SAP-AUTOMATION FLOW
-- ===============================================

CREATE TABLE sap_file (
  id          UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  filename    TEXT        NOT NULL,
  uploaded_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  run_count   INT         NOT NULL DEFAULT 0   -- how many times Process clicked
);

CREATE TABLE sap_row (
  id             UUID      PRIMARY KEY DEFAULT gen_random_uuid(),
  file_id        UUID      NOT NULL REFERENCES sap_file(id) ON DELETE CASCADE,
  row_index      INT       NOT NULL,
  cells          JSONB     NOT NULL,
  is_ready       BOOLEAN   NOT NULL,             -- cells[14]=='READY'
  part_code      TEXT      NOT NULL,             -- cells[2] or [3]
  processed_imd  BOOLEAN   NOT NULL DEFAULT FALSE,
  processed_sq   BOOLEAN   NOT NULL DEFAULT FALSE,
  imd_exec_count INT       NOT NULL DEFAULT 0,    -- times IMD ran
  sq_exec_count  INT       NOT NULL DEFAULT 0     -- times SQ ran
);


-- ===============================================
-- 3) SHARED LOOKUPS & AI CACHE
-- ===============================================

CREATE TABLE part (
  code         TEXT        PRIMARY KEY,         -- part_code
  description  TEXT,                            -- AI‐generated ≤10 words
  item_group   TEXT,                            -- one of your predefined groups
  is_manual    BOOLEAN   NOT NULL DEFAULT FALSE,-- true if user override
  enriched_at  TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE TABLE vendor_mapping (
  manufacturer TEXT   PRIMARY KEY,
  vendor_code  TEXT   NOT NULL
);


-- ===============================================
-- 4) JOB PROGRESS TRACKING
-- ===============================================

CREATE TABLE process_job (
  id              UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  import_file_id  UUID        REFERENCES import_file(id) ON DELETE SET NULL,
  sap_file_id     UUID        REFERENCES sap_file(id)    ON DELETE SET NULL,
  job_type        TEXT        NOT NULL
                     CHECK (job_type IN ('IMPORT_TXT','IMD','SQ')),
  created_at      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  completed_at    TIMESTAMPTZ,
  total_rows      INT         NOT NULL,
  processed_rows  INT         NOT NULL DEFAULT 0
);
s


-- ===============================================
-- 5) License
-- ===============================================


CREATE TABLE acceptance_log (
  id                UUID        PRIMARY KEY DEFAULT gen_random_uuid(),
  ip_address        TEXT        NOT NULL,
  accepted_at       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  agreement_version TEXT        NOT NULL,
  device_info       TEXT,
  license_code      TEXT        NOT NULL,
  license_accept    BOOLEAN     NOT NULL,
  company_name      TEXT
);

CREATE TABLE public.license (
  code           TEXT        PRIMARY KEY,
  company_name   TEXT        NOT NULL,
  valid_from     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  valid_until    TIMESTAMPTZ,
  is_active      BOOLEAN     NOT NULL DEFAULT TRUE
);



CREATE TABLE job_log (
  id            UUID                            PRIMARY KEY,
  user_id       TEXT,
  file_name     TEXT,
  job_type      TEXT,
  started_at    TIMESTAMP WITH TIME ZONE,
  completed_at  TIMESTAMP WITH TIME ZONE,
  total_cells   INTEGER,
  success_count INTEGER,
  failure_count INTEGER,
  patch_count   INTEGER
);






----------------------------
GRANT
----------------------------
DO
$$
DECLARE
  tbl record;
  svc_role CONSTANT text := 'user_1';  -- ← your app's DB role here
  excluded_tables text[] := ARRAY[
    'license',        -- only SELECT from the license codes table
    'vendor_mapping', -- only SELECT from your lookup table
    'acceptance_log'  -- only INSERT from your logging table if you want to write there separately
  ];
BEGIN
  -- 1) Grant full DML on every other table
  FOR tbl IN
    SELECT tablename
      FROM pg_tables
     WHERE schemaname = 'public'
       AND tablename <> ALL(excluded_tables)
  LOOP
    EXECUTE format(
      'GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE public.%I TO %I;',
      tbl.tablename,
      svc_role
    );
  END LOOP;

  -- 2) Grant only SELECT on the excluded tables:
  EXECUTE format(
    'GRANT SELECT ON TABLE public.%I, public.%I, public.%I TO %I;',
    excluded_tables[1],
    excluded_tables[2],
    excluded_tables[3],
    svc_role
  );
END
$$;
